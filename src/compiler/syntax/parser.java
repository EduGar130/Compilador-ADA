
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 11 17:28:37 CEST 2025
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.semantic.SemanticErrors;
import compiler.semantic.type.TypeBoolean;
import compiler.semantic.type.TypeInteger;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 11 17:28:37 CEST 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\057\002\000\002\002" +
    "\004\000\002\003\011\000\002\004\004\000\002\004\003" +
    "\000\002\007\004\000\002\007\003\000\002\011\004\000" +
    "\002\011\003\000\002\013\003\000\002\013\002\000\002" +
    "\006\003\000\002\006\004\000\002\015\010\000\002\016" +
    "\003\000\002\016\003\000\002\010\003\000\002\010\004" +
    "\000\002\017\012\000\002\020\003\000\002\020\004\000" +
    "\002\021\006\000\002\012\003\000\002\012\004\000\002" +
    "\023\005\000\002\023\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\014\003\000\002\014\004" +
    "\000\002\024\003\000\002\024\003\000\002\025\014\000" +
    "\002\025\013\000\002\027\005\000\002\027\003\000\002" +
    "\033\005\000\002\033\006\000\002\034\005\000\002\034" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\032\007\000\002\026\012\000\002\026\011\000" +
    "\002\005\007\000\002\005\006\000\002\035\004\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\006\000\002\045\003\000\002\045\003\000" +
    "\002\041\011\000\002\041\013\000\002\042\011\000\002" +
    "\037\007\000\002\050\003\000\002\050\003\000\002\043" +
    "\005\000\002\044\007\000\002\044\006\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\005\000\002" +
    "\060\002\000\002\055\005\000\002\055\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\052\003\000\002\047\005\000\002\047\005\000" +
    "\002\051\006\000\002\051\005\000\002\056\003\000\002" +
    "\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\034\000\001\002\000\004\002\310\001" +
    "\002\000\004\034\006\001\002\000\004\024\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\012\011\001\002\000" +
    "\004\013\012\001\002\000\004\037\013\001\002\000\014" +
    "\024\030\034\014\036\022\044\ufff6\047\025\001\002\000" +
    "\004\024\275\001\002\000\014\024\172\034\014\036\022" +
    "\044\ufff6\047\025\001\002\000\004\044\ufff8\001\002\000" +
    "\004\044\ufffa\001\002\000\004\044\ufffc\001\002\000\014" +
    "\024\ufff5\034\ufff5\036\ufff5\044\ufff5\047\ufff5\001\002\000" +
    "\004\024\231\001\002\000\010\034\uffe1\036\uffe1\044\uffe1" +
    "\001\002\000\012\024\uffea\034\uffea\036\uffea\044\uffea\001" +
    "\002\000\004\024\214\001\002\000\010\034\014\036\022" +
    "\044\ufff7\001\002\000\010\034\uffe3\036\uffe3\044\uffe3\001" +
    "\002\000\006\016\174\020\204\001\002\000\014\024\030" +
    "\034\014\036\022\044\ufff6\047\025\001\002\000\012\024" +
    "\172\034\014\036\022\044\ufff6\001\002\000\010\034\uffe0" +
    "\036\uffe0\044\uffe0\001\002\000\004\044\037\001\002\000" +
    "\014\024\ufff0\034\ufff0\036\ufff0\044\ufff0\047\ufff0\001\002" +
    "\000\004\002\ufffe\001\002\000\016\024\056\027\041\030" +
    "\040\032\051\033\046\043\052\001\002\000\012\012\067" +
    "\021\064\022\063\024\073\001\002\000\004\012\154\001" +
    "\002\000\020\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\043\uffcc\001\002\000\004\010\151\001\002\000" +
    "\020\024\056\027\041\030\040\031\uffce\032\051\033\046" +
    "\043\uffce\001\002\000\020\024\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\043\uffcd\001\002\000\012\012\067" +
    "\021\064\022\063\024\073\001\002\000\020\024\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\043\uffc9\001\002" +
    "\000\020\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\043\uffca\001\002\000\012\012\067\021\064\022\063" +
    "\024\073\001\002\000\004\024\131\001\002\000\004\043" +
    "\126\001\002\000\004\010\uffc5\001\002\000\020\024\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\043\uffc8\001" +
    "\002\000\010\010\uffc6\011\060\012\061\001\002\000\020" +
    "\024\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\043" +
    "\uffcb\001\002\000\004\024\124\001\002\000\014\012\067" +
    "\013\062\021\064\022\063\024\073\001\002\000\004\017" +
    "\123\001\002\000\004\024\uffb4\001\002\000\026\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\013\uffb2\016\uffb2\017\uffb2\026" +
    "\uffb2\040\uffb2\045\uffb2\001\002\000\020\004\105\005\102" +
    "\006\107\007\110\013\uffa8\016\117\026\103\001\002\000" +
    "\004\013\115\001\002\000\012\012\067\021\064\022\063" +
    "\024\073\001\002\000\026\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\013\uffb6\016\uffb6\017\uffb6\026\uffb6\040\uffb6\045\uffb6" +
    "\001\002\000\026\004\uffb7\005\uffb7\006\uffb7\007\uffb7\013" +
    "\uffb7\016\uffb7\017\uffb7\026\uffb7\040\uffb7\045\uffb7\001\002" +
    "\000\026\004\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8\016" +
    "\uffb8\017\uffb8\026\uffb8\040\uffb8\045\uffb8\001\002\000\006" +
    "\011\060\012\074\001\002\000\014\012\067\013\075\021" +
    "\064\022\063\024\073\001\002\000\026\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\013\uffa9\016\uffa9\017\uffa9\026\uffa9\040" +
    "\uffa9\045\uffa9\001\002\000\004\013\077\001\002\000\026" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\013\uffaa\016\uffaa\017" +
    "\uffaa\026\uffaa\040\uffaa\045\uffaa\001\002\000\016\004\105" +
    "\005\102\006\107\007\110\013\101\026\103\001\002\000" +
    "\026\004\uffb5\005\uffb5\006\uffb5\007\uffb5\013\uffb5\016\uffb5" +
    "\017\uffb5\026\uffb5\040\uffb5\045\uffb5\001\002\000\012\012" +
    "\uffaf\021\uffaf\022\uffaf\024\uffaf\001\002\000\012\012\uffad" +
    "\021\uffad\022\uffad\024\uffad\001\002\000\012\012\067\021" +
    "\064\022\063\024\073\001\002\000\012\012\uffae\021\uffae" +
    "\022\uffae\024\uffae\001\002\000\012\012\067\021\064\022" +
    "\063\024\073\001\002\000\012\012\uffb0\021\uffb0\022\uffb0" +
    "\024\uffb0\001\002\000\012\012\uffb1\021\uffb1\022\uffb1\024" +
    "\uffb1\001\002\000\012\012\067\021\064\022\063\024\073" +
    "\001\002\000\026\004\105\005\102\006\107\007\110\013" +
    "\uffb9\016\uffb9\017\uffb9\026\103\040\uffb9\045\uffb9\001\002" +
    "\000\026\004\105\005\102\006\107\007\110\013\uffbb\016" +
    "\uffbb\017\uffbb\026\103\040\uffbb\045\uffbb\001\002\000\026" +
    "\004\105\005\102\006\107\007\110\013\uffba\016\uffba\017" +
    "\uffba\026\103\040\uffba\045\uffba\001\002\000\004\017\116" +
    "\001\002\000\020\024\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\043\uffbd\001\002\000\012\012\067\021\064" +
    "\022\063\024\073\001\002\000\004\013\uffa7\001\002\000" +
    "\004\024\122\001\002\000\026\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\013\uffb3\016\uffb3\017\uffb3\026\uffb3\040\uffb3\045" +
    "\uffb3\001\002\000\020\024\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\043\uffbc\001\002\000\032\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\060\013\uffac\016\uffac" +
    "\017\uffac\026\uffac\040\uffac\045\uffac\001\002\000\030\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\013\uffab\016\uffab" +
    "\017\uffab\026\uffab\040\uffab\045\uffab\001\002\000\004\024" +
    "\127\001\002\000\004\017\130\001\002\000\012\002\uffd1" +
    "\034\uffd1\036\uffd1\044\uffd1\001\002\000\004\017\132\001" +
    "\002\000\012\002\uffd0\034\uffd0\036\uffd0\044\uffd0\001\002" +
    "\000\016\004\105\005\102\006\107\007\110\017\134\026" +
    "\103\001\002\000\020\024\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\043\uffbe\001\002\000\016\004\105\005" +
    "\102\006\107\007\110\026\103\040\136\001\002\000\014" +
    "\024\056\027\041\030\040\032\051\033\046\001\002\000" +
    "\006\031\140\043\141\001\002\000\014\024\056\027\041" +
    "\030\040\032\051\033\046\001\002\000\004\033\142\001" +
    "\002\000\004\017\143\001\002\000\020\024\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\043\uffc4\001\002\000" +
    "\004\043\145\001\002\000\004\033\146\001\002\000\004" +
    "\017\147\001\002\000\020\024\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\043\uffc3\001\002\000\006\031\uffcf" +
    "\043\uffcf\001\002\000\012\012\067\021\064\022\063\024" +
    "\073\001\002\000\016\004\105\005\102\006\107\007\110" +
    "\017\153\026\103\001\002\000\020\024\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\043\uffc7\001\002\000\014" +
    "\012\067\021\064\022\063\023\155\024\073\001\002\000" +
    "\004\013\uffbf\001\002\000\004\013\160\001\002\000\016" +
    "\004\105\005\102\006\107\007\110\013\uffc0\026\103\001" +
    "\002\000\004\017\161\001\002\000\020\024\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\043\uffc1\001\002\000" +
    "\016\004\105\005\102\006\107\007\110\026\103\045\163" +
    "\001\002\000\014\024\056\027\041\030\040\032\051\033" +
    "\046\001\002\000\004\043\165\001\002\000\004\045\166" +
    "\001\002\000\004\017\167\001\002\000\020\024\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\043\uffc2\001\002" +
    "\000\012\024\uffe9\034\uffe9\036\uffe9\044\uffe9\001\002\000" +
    "\004\044\ufff9\001\002\000\006\016\174\020\173\001\002" +
    "\000\010\024\200\041\176\042\201\001\002\000\004\024" +
    "\172\001\002\000\012\024\uffe7\034\uffe7\036\uffe7\044\uffe7" +
    "\001\002\000\016\013\uffe6\017\uffe6\024\uffe6\034\uffe6\036" +
    "\uffe6\044\uffe6\001\002\000\012\024\uffe8\034\uffe8\036\uffe8" +
    "\044\uffe8\001\002\000\016\013\uffe4\017\uffe4\024\uffe4\034" +
    "\uffe4\036\uffe4\044\uffe4\001\002\000\016\013\uffe5\017\uffe5" +
    "\024\uffe5\034\uffe5\036\uffe5\044\uffe5\001\002\000\014\024" +
    "\ufff4\034\ufff4\036\ufff4\044\ufff4\047\ufff4\001\002\000\004" +
    "\044\ufffd\001\002\000\012\024\200\025\205\041\176\042" +
    "\201\001\002\000\004\010\206\001\002\000\006\021\210" +
    "\022\211\001\002\000\004\017\212\001\002\000\004\017" +
    "\ufff2\001\002\000\004\017\ufff1\001\002\000\014\024\ufff3" +
    "\034\ufff3\036\ufff3\044\ufff3\047\ufff3\001\002\000\010\034" +
    "\uffe2\036\uffe2\044\uffe2\001\002\000\004\037\215\001\002" +
    "\000\004\035\216\001\002\000\004\024\217\001\002\000" +
    "\004\020\226\001\002\000\006\024\217\043\222\001\002" +
    "\000\006\024\uffed\043\uffed\001\002\000\004\035\224\001" +
    "\002\000\006\024\uffec\043\uffec\001\002\000\004\017\225" +
    "\001\002\000\014\024\uffee\034\uffee\036\uffee\044\uffee\047" +
    "\uffee\001\002\000\010\024\200\041\176\042\201\001\002" +
    "\000\004\017\230\001\002\000\006\024\uffeb\043\uffeb\001" +
    "\002\000\004\012\232\001\002\000\006\013\237\024\235" +
    "\001\002\000\004\013\265\001\002\000\004\020\261\001" +
    "\002\000\006\016\257\020\uffd8\001\002\000\006\013\uffdc" +
    "\017\255\001\002\000\004\032\240\001\002\000\006\041" +
    "\241\042\243\001\002\000\004\037\uffd7\001\002\000\004" +
    "\037\244\001\002\000\004\037\uffd6\001\002\000\014\024" +
    "\172\034\014\036\022\044\ufff6\047\025\001\002\000\004" +
    "\044\250\001\002\000\004\044\uffd5\001\002\000\010\034" +
    "\uffde\036\uffde\044\uffde\001\002\000\014\024\056\027\041" +
    "\030\040\032\051\033\046\001\002\000\004\043\252\001" +
    "\002\000\004\024\253\001\002\000\004\017\254\001\002" +
    "\000\010\034\uffd4\036\uffd4\044\uffd4\001\002\000\004\024" +
    "\235\001\002\000\004\013\uffdd\001\002\000\004\024\235" +
    "\001\002\000\004\020\uffd9\001\002\000\012\024\200\041" +
    "\176\042\201\046\262\001\002\000\010\024\200\041\176" +
    "\042\201\001\002\000\006\013\uffdb\017\uffdb\001\002\000" +
    "\006\013\uffda\017\uffda\001\002\000\004\032\266\001\002" +
    "\000\006\041\241\042\243\001\002\000\004\037\270\001" +
    "\002\000\014\024\172\034\014\036\022\044\ufff6\047\025" +
    "\001\002\000\004\044\250\001\002\000\010\034\uffdf\036" +
    "\uffdf\044\uffdf\001\002\000\004\044\ufffb\001\002\000\014" +
    "\024\uffef\034\uffef\036\uffef\044\uffef\047\uffef\001\002\000" +
    "\004\012\276\001\002\000\006\013\300\024\235\001\002" +
    "\000\004\013\304\001\002\000\004\037\301\001\002\000" +
    "\014\024\172\034\014\036\022\044\ufff6\047\025\001\002" +
    "\000\004\044\037\001\002\000\010\034\uffd2\036\uffd2\044" +
    "\uffd2\001\002\000\004\037\305\001\002\000\014\024\172" +
    "\034\014\036\022\044\ufff6\047\025\001\002\000\004\044" +
    "\037\001\002\000\010\034\uffd3\036\uffd3\044\uffd3\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\057\004\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\033\006\030\007\017\010\014\011\016" +
    "\012\031\013\015\014\025\015\020\017\034\023\023\024" +
    "\026\025\022\026\032\001\001\000\002\001\001\000\024" +
    "\011\272\012\031\013\015\014\025\017\273\023\023\024" +
    "\026\025\022\026\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\212\025\022\026\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\202\010\014\011\016" +
    "\012\031\013\015\014\025\015\201\017\034\023\023\024" +
    "\026\025\022\026\032\001\001\000\016\013\170\014\025" +
    "\023\167\024\026\025\022\026\032\001\001\000\002\001" +
    "\001\000\004\005\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\035\052\036\043\037\044\040\041\041" +
    "\056\042\047\043\046\044\054\045\042\047\053\001\001" +
    "\000\012\046\161\047\071\051\070\055\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\035\147\036\043\037\044\040\041\041\056\042\047\043" +
    "\046\044\054\045\042\047\053\001\001\000\002\001\001" +
    "\000\012\046\134\047\071\051\070\055\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\046\132\047\071" +
    "\051\070\055\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\124\001\001\000\014\046" +
    "\064\047\071\051\070\055\067\056\065\001\001\000\002" +
    "\001\001\000\004\060\120\001\001\000\002\001\001\000" +
    "\010\052\105\053\103\054\110\001\001\000\002\001\001" +
    "\000\012\046\077\047\071\051\070\055\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\064\047\071\051\070\055\067\056" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\105\053\103\054\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\113\047\071\051\070\055\067\001\001\000\002\001" +
    "\001\000\012\046\112\047\071\051\070\055\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\111\047" +
    "\071\051\070\055\067\001\001\000\010\052\105\053\103" +
    "\054\110\001\001\000\010\052\105\053\103\054\110\001" +
    "\001\000\010\052\105\053\103\054\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\064\047\071\051" +
    "\070\055\067\056\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\105\053\103\054\110\001\001\000\002\001\001" +
    "\000\010\052\105\053\103\054\110\001\001\000\026\035" +
    "\136\036\043\037\044\040\041\041\056\042\047\043\046" +
    "\044\054\045\042\047\053\001\001\000\002\001\001\000" +
    "\026\035\143\036\043\037\044\040\041\041\056\042\047" +
    "\043\046\044\054\045\042\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\046\151\047\071\051\070\055\067" +
    "\001\001\000\010\052\105\053\103\054\110\001\001\000" +
    "\002\001\001\000\014\046\156\047\071\050\155\051\070" +
    "\055\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\105\053\103\054\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\052\105\053\103\054\110\001" +
    "\001\000\026\035\163\036\043\037\044\040\041\041\056" +
    "\042\047\043\046\044\054\045\042\047\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\176\001\001\000\004\023\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\176\001\001\000\002\001\001\000" +
    "\004\016\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\217\021\220" +
    "\001\001\000\002\001\001\000\004\021\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\232\033\235\034\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\245\010\014" +
    "\011\016\012\031\013\015\014\025\017\034\023\023\024" +
    "\026\025\022\026\032\031\244\001\001\000\004\032\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\250\036\043\037\044\040\041\041\056\042\047\043\046" +
    "\044\054\045\042\047\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\255\033\235\034\233\001\001\000\002\001\001\000" +
    "\004\034\257\001\001\000\002\001\001\000\004\022\262" +
    "\001\001\000\004\022\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\266\001\001" +
    "\000\002\001\001\000\032\007\245\010\014\011\016\012" +
    "\031\013\015\014\025\017\034\023\023\024\026\025\022" +
    "\026\032\031\270\001\001\000\004\032\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\276\033\235\034\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\245\010\014" +
    "\011\016\012\031\013\015\014\025\017\034\023\023\024" +
    "\026\025\022\026\032\031\301\001\001\000\004\005\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\245\010\014\011\016\012\031\013\015\014\025\017\034" +
    "\023\023\024\026\025\022\026\032\031\305\001\001\000" +
    "\004\005\306\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

	//Método para la creación de errores semánticos
	public void semanticFatalError(String errorMessage, int line, int column) {
        SemanticError sError = new SemanticError(errorMessage);
        sError.setLine(line);
        sError.setColumn(column);
        semanticErrorManager.semanticFatalError(sError);
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listaParametrosInvocacion ::= expresion DELIMLISTA listaParametrosInvocacion 
            {
              ListaParametrosInvocacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametrosInvocacion lpi = (ListaParametrosInvocacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Lista de parámetros: añadir parámetro");

    ((ListaParametrosInvocacion)lpi).addParametro((Expresion)e);
    RESULT = lpi;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaParametrosInvocacion ::= expresion 
            {
              ListaParametrosInvocacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Lista de parámetros: primer parámetro");

    ListaParametrosInvocacion listaParametros = new ListaParametrosInvocacion();
    listaParametros.addParametro((Expresion)e);
    RESULT = listaParametros;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprFuncion ::= IDENTIFICADOR PARENTESISAP PARENTESISCIERRE 
            {
              ExprFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    semanticErrorManager.semanticDebug("Procesando invocación de función sin parámetros");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());
    if (simbolo == null) {
        semanticFatalError("Función no declarada: " + id.getLexema(), id.getLine(), id.getColumn());
    }
    if (!(simbolo instanceof SymbolFunction)) {
        semanticFatalError("El identificador '" + id.getLexema() + "' no es una función.", id.getLine(), id.getColumn());
    }
    
    SymbolFunction function = (SymbolFunction) simbolo;
    
    // Validar que la función no recibe parámetros
    if (!function.getParameterList().isEmpty()) {
        semanticFatalError("La función '" + id.getLexema() + "' requiere parámetros.", id.getLine(), id.getColumn());
    }

    ExprFuncion exprFuncion = new ExprFuncion();
    exprFuncion.setFuncion(function);

    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    iCb.addQuadruple(Nemonic.CALL, function);

    exprFuncion.setIntermediateCode(iCb.create());

    RESULT = exprFuncion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprFuncion ::= IDENTIFICADOR PARENTESISAP listaParametrosInvocacion PARENTESISCIERRE 
            {
              ExprFuncion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaParametrosInvocacion lpi = (ListaParametrosInvocacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    semanticErrorManager.semanticDebug("Procesando invocación de función con parámetros");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    // Buscar la función
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());
    if (simbolo == null) {
        semanticFatalError("Función no declarada: " + id.getLexema(), id.getLine(), id.getColumn());
    }
    if (!(simbolo instanceof SymbolFunction)) {
        semanticFatalError("El identificador '" + id.getLexema() + "' no es una función.", id.getLine(), id.getColumn());
    }
    
    SymbolFunction function = (SymbolFunction) simbolo;

    // Validar número de parámetros
    List<SymbolParameter> parametrosFormales = function.getParameterList();
    List<Expresion> parametrosActuales = ((ListaParametrosInvocacion)lpi).getParametros();

    if (parametrosFormales.size() != parametrosActuales.size()) {
        semanticFatalError("Número incorrecto de parámetros en llamada a función '" + id.getLexema() + "'.", id.getLine(), id.getColumn());
    }

    // Validar tipo de cada parámetro
    for (int i = 0; i < parametrosFormales.size(); i++) {
        TypeIF tipoFormal = parametrosFormales.get(i).getType();
        TypeIF tipoActual = parametrosActuales.get(i).getType();
        if (!tipoFormal.equals(tipoActual)) {
            semanticFatalError("Tipo incorrecto en el parámetro " + (i+1) + " de la función '" + id.getLexema() + "'.", id.getLine(), id.getColumn());
        }
    }

    // Crear el objeto ExprFuncion
    ExprFuncion exprFuncion = new ExprFuncion();
    exprFuncion.setFuncion(function);

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    for (Expresion parametro : parametrosActuales) {
        iCb.addQuadruples(parametro.getIntermediateCode());
        iCb.addQuadruple(Nemonic.PARAM, parametro.getTemporal());
    }
    iCb.addQuadruple(Nemonic.CALL, function);

    exprFuncion.setIntermediateCode(iCb.create());

    RESULT = exprFuncion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO expresionAccesoRegistro 
            {
              ExpresionAccesoRegistro RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Acceso a campo encadenado: " + id1.getLexema() + ".<resto>");

    ScopeIF scope = scopeManager.getCurrentScope();
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id1.getLexema());

    if (simbolo == null) {
        semanticFatalError("Identificador no declarado: " + id1.getLexema(), id1.getLine(), id1.getColumn());
    }
    if (!(simbolo.getType() instanceof TypeRecord)) {
        semanticFatalError("Acceso no permitido: " + id1.getLexema() + " no es un RECORD.", id1.getLine(), id1.getColumn());
    }

    TypeRecord typeRecord = (TypeRecord) simbolo.getType();
    TypeIF tipoCampo = typeRecord.getCampo(ear.getFirstField());

    if (tipoCampo == null) {
        semanticFatalError("El campo '" + ear.getFirstField() + "' no existe en el record '" + id1.getLexema() + "'.", id1.getLine(), id1.getColumn());
    }

    // Crear nueva ExpresionAccesoRegistro propagando el tipo final
    ExpresionAccesoRegistro nuevoEar = new ExpresionAccesoRegistro();
    nuevoEar.setType(ear.getType()); // Tipo final del encadenamiento
    RESULT = nuevoEar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO IDENTIFICADOR 
            {
              ExpresionAccesoRegistro RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Acceso a campo simple: " + id1.getLexema() + "." + id2.getLexema());
    
    ScopeIF scope = scopeManager.getCurrentScope();
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id1.getLexema());

    if (simbolo == null) {
        semanticFatalError("Identificador no declarado: " + id1.getLexema(), id1.getLine(), id1.getColumn());
    }
    if (!(simbolo.getType() instanceof TypeRecord)) {
        semanticFatalError("Acceso no permitido: " + id1.getLexema() + " no es un RECORD.", id1.getLine(), id1.getColumn());
    }

    TypeRecord typeRecord = (TypeRecord) simbolo.getType();
    TypeIF tipoCampo = typeRecord.getCampo(id2.getLexema());

    if (tipoCampo == null) {
        semanticFatalError("El campo '" + id2.getLexema() + "' no existe en el record '" + id1.getLexema() + "'.", id2.getLine(), id2.getColumn());
    }

    // Crear ExpresionAccesoRegistro
    ExpresionAccesoRegistro ear = new ExpresionAccesoRegistro();
    ear.setType(tipoCampo);
    RESULT = ear;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorLogico ::= AND 
            {
              OperadorLogico RESULT =null;
		
    semanticErrorManager.semanticDebug("Operador lógico: AND");

    OperadorLogico operador = new OperadorLogico();
    operador.setOperacion("AND");
    RESULT = operador;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadorAritmetico ::= MULT 
            {
              OperadorAritmetico RESULT =null;
		
    semanticErrorManager.semanticDebug("Operador aritmético: MULT");

    OperadorAritmetico operador = new OperadorAritmetico();
    operador.setOperacion("MULT");
    RESULT = operador;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorAritmetico ::= MINUS 
            {
              OperadorAritmetico RESULT =null;
		
    semanticErrorManager.semanticDebug("Operador aritmético: MINUS");

    OperadorAritmetico operador = new OperadorAritmetico();
    operador.setOperacion("MINUS");
    RESULT = operador;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorRelacional ::= MAYOR 
            {
              OperadorRelacional RESULT =null;
		
    semanticErrorManager.semanticDebug("Operador relacional: MAYOR");

    OperadorRelacional operador = new OperadorRelacional();
    operador.setOperacion("MAYOR");
    RESULT = operador;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorRelacional ::= DISTINTO 
            {
              OperadorRelacional RESULT =null;
		
    semanticErrorManager.semanticDebug("Operador relacional: DISTINTO");

    OperadorRelacional operador = new OperadorRelacional();
    operador.setOperacion("DISTINTO");
    RESULT = operador;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operando ::= ENTERO 
            {
              Operando RESULT =null;
		int intlitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intlitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token intlit = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   semanticErrorManager.semanticDebug("Procesando operando ENTERO: " + intlit.getLexema());

   ScopeIF scope = scopeManager.getCurrentScope();

   TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");
   if (typeInteger == null) {
       semanticErrorManager.semanticFatalError("[Error] Tipo INTEGER no registrado en Scope Global.");
   }

   TemporalFactory tf = new TemporalFactory(scope);
   IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
   TemporalIF temporal = tf.create();
   Value valor = new Value(Integer.parseInt(intlit.getLexema()));
   iCb.addQuadruple(Nemonic.MV, temporal, valor);

   Operando operando = new Operando();
   operando.setTemporal(temporal);
   operando.setType(typeInteger);
   operando.setIntermediateCode(iCb.create());

   semanticErrorManager.semanticDebug("Operando ENTERO creado correctamente con valor: " + valor);

   RESULT = operando;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operando ::= BOOLEANO NT$1 IDENTIFICADOR 
            {
              Operando RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Operando) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token bool = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   semanticErrorManager.semanticDebug("Procesando operando IDENTIFICADOR: " + id.getLexema());

   ScopeIF scope = scopeManager.getCurrentScope();
   TemporalFactory tf = new TemporalFactory(scope);
	IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
	TemporalIF temporal = tf.create();
	String symbolName = id.getLexema();

   SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());

   Operando operando = new Operando();
   operando.setTemporal(temporal);
   operando.setType(simbolo.getType());
   if (simbolo == null) {
       semanticErrorManager.semanticFatalError("[Error] Identificador '" + id.getLexema() + "' no declarado.");
   }

	if(simbolo instanceof SymbolVariable){
		Variable var = new Variable(symbolName, simbolo.getScope());
		iCb.addQuadruple(Nemonic.MVP, temporal, var);
	}
	else if(simbolo instanceof SymbolConstant){
		Value valor = new Value(((SymbolConstant)simbolo).getValue());
		iCb.addQuadruple(Nemonic.MV, temporal, valor);
	}else{
    	semanticErrorManager.semanticFatalError("[Error] Identificador '" + id.getLexema() + "' no es una variable ni una constante.");
	}

   operando.setIntermediateCode(iCb.create());
   
   semanticErrorManager.semanticDebug("Operando IDENTIFICADOR creado correctamente con tipo: " + simbolo.getType().getName());

   RESULT = operando;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$1 ::= 
            {
              Operando RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token bool = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

   semanticErrorManager.semanticDebug("Procesando operando BOOLEANO: " + bool.getLexema());

   ScopeIF scope = scopeManager.getCurrentScope();

   TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");
   if (typeBoolean == null) {
       semanticErrorManager.semanticFatalError("[Error] Tipo BOOLEAN no registrado en Scope Global.");
   }
   TemporalFactory tf = new TemporalFactory(scope);
   IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
   TemporalIF temporal = tf.create();
   Value valor = new Value(bool.getLexema().equalsIgnoreCase("True"));
   iCb.addQuadruple(Nemonic.MV, temporal, valor);

   Operando operando = new Operando();
   operando.setTemporal(temporal);
   operando.setType(typeBoolean);
   operando.setIntermediateCode(iCb.create());
   

   semanticErrorManager.semanticDebug("Operando BOOLEANO creado correctamente con valor: " + valor);

   RESULT = operando;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= PARENTESISAP expresion PARENTESISCIERRE 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    semanticErrorManager.semanticDebug("Expresión paréntesis");
    Expresion expr = new Expresion();
    expr.setType(e.getType());
    expr.setTemporal(e.getTemporal());
    expr.setIntermediateCode(e.getIntermediateCode());
    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= operando 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operando o = (Operando)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión operando");
    Expresion expr = new Expresion();
    expr.setType(((Operando)o).getType());
    expr.setTemporal(((Operando)o).getTemporal());
    expr.setIntermediateCode(((Operando)o).getIntermediateCode());
    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= exprFuncion 
            {
              Expresion RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFuncion ef = (ExprFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión llamada a función");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeTableIF typeTable = scope.getTypeTable();

    Expresion expr = new Expresion();
    
    // Código intermedio
    TemporalFactory tf = new TemporalFactory(scope);
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    TemporalIF temp = tf.create();

    iCb.addQuadruples(((ExprFuncion)ef).getIntermediateCode());
    iCb.addQuadruple(Nemonic.MV, temp, ((ExprFuncion)ef).getTemporal());

    expr.setTemporal(temp);
    expr.setIntermediateCode(iCb.create());
    
    // Asumimos que todas las funciones devuelven ENTERO por defecto (ajustable)
    expr.setType(typeTable.getType("INTEGER"));

    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresionAccesoRegistro 
            {
              Expresion RESULT =null;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión acceso a registro");
    Expresion expr = new Expresion();
    expr.setType(((ExpresionAccesoRegistro)ear).getType());
    expr.setTemporal(((ExpresionAccesoRegistro)ear).getTemporal());
    expr.setIntermediateCode(((ExpresionAccesoRegistro)ear).getIntermediateCode());
    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion operadorAritmetico expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorAritmetico op = (OperadorAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión aritmética");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");

    // Comprobar que ambos operandos son INTEGER
    if (!e1.getType().equals(typeInteger) || !e2.getType().equals(typeInteger)) {
        semanticFatalError("Error de tipos en operación aritmética: se esperaban INTEGER.", 0, 0);
    }

    Expresion expr = new Expresion();
    TemporalFactory tf = new TemporalFactory(scope);
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);

    TemporalIF t1 = e1.getTemporal();
    TemporalIF t2 = e2.getTemporal();
    TemporalIF t = tf.create();

    iCb.addQuadruples(e1.getIntermediateCode());
    iCb.addQuadruples(e2.getIntermediateCode());
    iCb.addQuadruple(Nemonic.SUB, t, t1, t2); // Suponemos operador 'MINUS' (-)

    expr.setType(typeInteger);
    expr.setTemporal(t);
    expr.setIntermediateCode(iCb.create());

    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion operadorRelacional expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorRelacional op = (OperadorRelacional)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión relacional");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    // Comprobar que ambos operandos son INTEGER
    if (!e1.getType().equals(typeInteger) || !e2.getType().equals(typeInteger)) {
        semanticFatalError("Error de tipos en operación relacional: se esperaban INTEGER.", 0, 0);
    }

    Expresion expr = new Expresion();
    TemporalFactory tf = new TemporalFactory(scope);
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);

    TemporalIF t1 = e1.getTemporal();
    TemporalIF t2 = e2.getTemporal();
    TemporalIF t = tf.create();

    iCb.addQuadruples(e1.getIntermediateCode());
    iCb.addQuadruples(e2.getIntermediateCode());
    iCb.addQuadruple(Nemonic.GR, t, t1, t2); // Suponemos operador 'MAYOR' (>)
    
    expr.setType(typeBoolean);
    expr.setTemporal(t);
    expr.setIntermediateCode(iCb.create());

    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion operadorLogico expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorLogico op = (OperadorLogico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Expresión lógica");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    // Comprobar que ambos operandos son BOOLEAN
    if (!e1.getType().equals(typeBoolean) || !e2.getType().equals(typeBoolean)) {
        semanticFatalError("Error de tipos en operación lógica: se esperaban BOOLEAN.", 0, 0);
    }

    // Crear nueva expresión
    Expresion expr = new Expresion();
    TemporalFactory tf = new TemporalFactory(scope);
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);

    TemporalIF t1 = e1.getTemporal();
    TemporalIF t2 = e2.getTemporal();
    TemporalIF t = tf.create();

    // Generar código intermedio
    iCb.addQuadruples(e1.getIntermediateCode());
    iCb.addQuadruples(e2.getIntermediateCode());
    iCb.addQuadruple(Nemonic.AND, t, t1, t2); // Solo soportamos 'AND' ahora

    expr.setType(typeBoolean);
    expr.setTemporal(t);
    expr.setIntermediateCode(iCb.create());

    RESULT = expr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaProcedimiento ::= IDENTIFICADOR PARENTESISAP PARENTESISCIERRE DELIMPUNTOCOMA 
            {
              SentenciaProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    semanticErrorManager.semanticDebug("Procesando llamada a procedimiento sin parámetros");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());
    if (simbolo == null) {
        semanticFatalError("Procedimiento no declarado: " + id.getLexema(), id.getLine(), id.getColumn());
    }
    if (!(simbolo instanceof SymbolProcedure)) {
        semanticFatalError("El identificador '" + id.getLexema() + "' no es un procedimiento.", id.getLine(), id.getColumn());
    }

    SymbolProcedure procedimiento = (SymbolProcedure) simbolo;

    // Validar que el procedimiento no recibe parámetros
    if (!procedimiento.getParameterList().isEmpty()) {
        semanticFatalError("El procedimiento '" + id.getLexema() + "' requiere parámetros.", id.getLine(), id.getColumn());
    }

    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    iCb.addQuadruple(Nemonic.CALL, procedimiento);

    SentenciaProcedimiento sentenciaProcedimiento = new SentenciaProcedimiento();
    sentenciaProcedimiento.setIntermediateCode(iCb.create());

    RESULT = sentenciaProcedimiento;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaProcedimiento ::= IDENTIFICADOR PARENTESISAP listaParametrosInvocacion PARENTESISCIERRE DELIMPUNTOCOMA 
            {
              SentenciaProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaParametrosInvocacion lpi = (ListaParametrosInvocacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    semanticErrorManager.semanticDebug("Procesando llamada a procedimiento con parámetros");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());
    if (simbolo == null) {
        semanticFatalError("Procedimiento no declarado: " + id.getLexema(), id.getLine(), id.getColumn());
    }
    if (!(simbolo instanceof SymbolProcedure)) {
        semanticFatalError("El identificador '" + id.getLexema() + "' no es un procedimiento.", id.getLine(), id.getColumn());
    }

    SymbolProcedure procedimiento = (SymbolProcedure) simbolo;

    // Validar número de parámetros
    List<SymbolParameter> parametrosFormales = procedimiento.getParameterList();
    List<Expresion> parametrosActuales = ((ListaParametrosInvocacion)lpi).getParametros();

    if (parametrosFormales.size() != parametrosActuales.size()) {
        semanticFatalError("Número incorrecto de parámetros en llamada a procedimiento '" + id.getLexema() + "'.", id.getLine(), id.getColumn());
    }

    // Validar tipo de cada parámetro
    for (int i = 0; i < parametrosFormales.size(); i++) {
        TypeIF tipoFormal = parametrosFormales.get(i).getType();
        TypeIF tipoActual = parametrosActuales.get(i).getType();
        if (!tipoFormal.equals(tipoActual)) {
            semanticFatalError("Tipo incorrecto en el parámetro " + (i+1) + " del procedimiento '" + id.getLexema() + "'.", id.getLine(), id.getColumn());
        }
    }

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    for (Expresion parametro : parametrosActuales) {
        iCb.addQuadruples(parametro.getIntermediateCode());
        iCb.addQuadruple(Nemonic.PARAM, parametro.getTemporal());
    }
    iCb.addQuadruple(Nemonic.CALL, procedimiento);

    SentenciaProcedimiento sentenciaProcedimiento = new SentenciaProcedimiento();
    sentenciaProcedimiento.setIntermediateCode(iCb.create());

    RESULT = sentenciaProcedimiento;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaReturn ::= RETURN expresion DELIMPUNTOCOMA 
            {
              SentenciaReturn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    semanticErrorManager.semanticDebug("Procesando sentencia RETURN");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    SentenciaReturn sentenciaReturn = new SentenciaReturn();
    sentenciaReturn.setExpresion((Expresion)e);

    /*TypeIF tipoRetornoFuncion = obtenerTipoDeLaFuncionActual();
    if (!((Expresion)e).getType().equals(tipoRetornoFuncion)) {
         semanticFatalError("Tipo de retorno incorrecto en RETURN.", 0, 0);
    }*/

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    iCb.addQuadruples(((Expresion)e).getIntermediateCode());
    iCb.addQuadruple(Nemonic.RET, ((Expresion)e).getTemporal());

    sentenciaReturn.setIntermediateCode(iCb.create());

    RESULT = sentenciaReturn;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro ::= CADENACARACTERES 
            {
              Parametro RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token cad = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Procesando parámetro: cadena de caracteres");
    Parametro parametro = new Parametro(cad.getLexema());
    RESULT = parametro;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro ::= expresion 
            {
              Parametro RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Procesando parámetro: expresión");
    Parametro parametro = new Parametro((Expresion)e);
    RESULT = parametro;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaPutLine ::= PUTLINE PARENTESISAP parametro PARENTESISCIERRE DELIMPUNTOCOMA 
            {
              SentenciaPutLine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    semanticErrorManager.semanticDebug("Procesando sentencia PUT_LINE");
    ScopeIF scope = scopeManager.getCurrentScope();
    
    SentenciaPutLine sentenciaPutLine = new SentenciaPutLine();
    sentenciaPutLine.setParametro((Parametro)p);

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);

    if (((Parametro)p).esCadena()) {
        // Escribir una cadena de caracteres
        iCb.addQuadruple(Nemonic.WRSTR, ((Parametro)p).getCadena());
    } else {
        // Escribir una expresión (entero o booleano)
        iCb.addQuadruples(((Parametro)p).getExpresion().getIntermediateCode());
        iCb.addQuadruple(Nemonic.WRINT, ((Parametro)p).getExpresion().getTemporal());
    }

    sentenciaPutLine.setIntermediateCode(iCb.create());

    RESULT = sentenciaPutLine;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP DELIMPUNTOCOMA 
            {
              SentenciaWhile RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias st = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    semanticErrorManager.semanticDebug("Procesando sentencia WHILE");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    if (!((Expresion)e).getType().equals(typeBoolean)) {
        semanticFatalError("La condición del WHILE debe ser de tipo BOOLEAN.", 0, 0);
    }

    SentenciaWhile sentenciaWhile = new SentenciaWhile();
    sentenciaWhile.setCondicion((Expresion)e);
    sentenciaWhile.setCuerpo((Sentencias)st);

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    LabelFactory lf = new LabelFactory();
    LabelIF etiquetaInicioWhile = lf.create();
    LabelIF etiquetaFinWhile = lf.create();

    iCb.addQuadruple(Nemonic.INL, etiquetaInicioWhile);
    iCb.addQuadruples(((Expresion)e).getIntermediateCode());
    iCb.addQuadruple(Nemonic.BRF, ((Expresion)e).getTemporal(), etiquetaFinWhile);
    iCb.addQuadruples(((Sentencias)st).getIntermediateCode());
    iCb.addQuadruple(Nemonic.BR, etiquetaInicioWhile);
    iCb.addQuadruple(Nemonic.INL, etiquetaFinWhile);

    sentenciaWhile.setIntermediateCode(iCb.create());

    RESULT = sentenciaWhile;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF DELIMPUNTOCOMA 
            {
              SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sentencias st = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias se = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    semanticErrorManager.semanticDebug("Procesando sentencia IF (con ELSE)");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    if (!((Expresion)e).getType().equals(typeBoolean)) {
        semanticFatalError("La condición del IF debe ser de tipo BOOLEAN.", 0, 0);
    }

    SentenciaIf sentenciaIf = new SentenciaIf();
    sentenciaIf.setCondicion((Expresion)e);
    sentenciaIf.setCuerpoThen((Sentencias)st);
    sentenciaIf.setCuerpoElse((Sentencias)se);

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    LabelFactory lf = new LabelFactory();
    LabelIF etiquetaElse = lf.create();
    LabelIF etiquetaFinIf = lf.create();

    iCb.addQuadruples(((Expresion)e).getIntermediateCode());
    iCb.addQuadruple(Nemonic.BRF, ((Expresion)e).getTemporal(), etiquetaElse);
    iCb.addQuadruples(((Sentencias)st).getIntermediateCode());
    iCb.addQuadruple(Nemonic.BR, etiquetaFinIf);
    iCb.addQuadruple(Nemonic.INL, etiquetaElse);
    iCb.addQuadruples(((Sentencias)se).getIntermediateCode());
    iCb.addQuadruple(Nemonic.INL, etiquetaFinIf);

    sentenciaIf.setIntermediateCode(iCb.create());

    RESULT = sentenciaIf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaIf ::= IF expresion THEN sentencias END IF DELIMPUNTOCOMA 
            {
              SentenciaIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias st = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    semanticErrorManager.semanticDebug("Procesando sentencia IF (sin ELSE)");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    // Validar que la condición sea BOOLEAN
    if (!((Expresion)e).getType().equals(typeBoolean)) {
        semanticFatalError("La condición del IF debe ser de tipo BOOLEAN.", 0, 0);
    }

    SentenciaIf sentenciaIf = new SentenciaIf();
    sentenciaIf.setCondicion((Expresion)e);
    sentenciaIf.setCuerpoThen((Sentencias)st);

    // Código intermedio
    IntermediateCodeBuilder iCb = new IntermediateCodeBuilder(scope);
    LabelFactory lf = new LabelFactory();
    LabelIF etiquetaFinIf = lf.create();

    iCb.addQuadruples(((Expresion)e).getIntermediateCode());
    iCb.addQuadruple(Nemonic.BRF, ((Expresion)e).getTemporal(), etiquetaFinIf);
    iCb.addQuadruples(((Sentencias)st).getIntermediateCode());
    iCb.addQuadruple(Nemonic.INL, etiquetaFinIf);

    sentenciaIf.setIntermediateCode(iCb.create());

    RESULT = sentenciaIf;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ref ::= expresionAccesoRegistro 
            {
              Ref RESULT =null;
		int earleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAccesoRegistro ear = (ExpresionAccesoRegistro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Referencia a acceso a registro");

    Ref ref = new Ref();
    ref.setType(((ExpresionAccesoRegistro)ear).getType());
    RESULT = ref;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ref ::= IDENTIFICADOR 
            {
              Ref RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Referencia simple a variable: " + id.getLexema());

    ScopeIF scope = scopeManager.getCurrentScope();
    SymbolBase simbolo = (SymbolBase) scopeManager.searchSymbol(id.getLexema());

    if (simbolo == null) {
        semanticFatalError("Variable no declarada: " + id.getLexema(), id.getLine(), id.getColumn());
    }

    if (!(simbolo instanceof SymbolVariable)) {
        semanticFatalError("El identificador '" + id.getLexema() + "' no es una variable.", id.getLine(), id.getColumn());
    }

    Ref ref = new Ref();
    ref.setType(simbolo.getType());
    RESULT = ref;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaAsignacion ::= ref ASIGNACION expresion DELIMPUNTOCOMA 
            {
              SentenciaAsignacion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ref r = (Ref)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    semanticErrorManager.semanticDebug("Procesando asignación");

    // Validar que los tipos coincidan
    if (!((Ref)r).getType().equals(((Expresion)e).getType())) {
        semanticFatalError("Error de tipos en asignación.", 0, 0);
    }

    SentenciaAsignacion sentenciaAsignacion = new SentenciaAsignacion();
    sentenciaAsignacion.setRef((Ref)r);
    sentenciaAsignacion.setExpresion((Expresion)e);

    RESULT = sentenciaAsignacion;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaProcedimiento 
            {
              Sentencia RESULT =null;
		int spcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaProcedimiento spc = (SentenciaProcedimiento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaProcedimiento((SentenciaProcedimiento)spc);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= sentenciaReturn 
            {
              Sentencia RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaReturn sr = (SentenciaReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaReturn((SentenciaReturn)sr);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= sentenciaWhile 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaWhile sw = (SentenciaWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaWhile((SentenciaWhile)sw);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= sentenciaIf 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaIf si = (SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaIf((SentenciaIf)si);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaAsignacion sa = (SentenciaAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaAsignacion((SentenciaAsignacion)sa);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= sentenciaPutLine 
            {
              Sentencia RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaPutLine sp = (SentenciaPutLine)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencia sentencia = new Sentencia();
    sentencia.setSentenciaPutLine((SentenciaPutLine)sp);
    RESULT = sentencia;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= sentencia 
            {
              Sentencias RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencias sentencias = new Sentencias();
    sentencias.addSentencia((Sentencia)s);
    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sentencia sentencias 
            {
              Sentencias RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias ss = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Sentencias sentencias = new Sentencias();
    sentencias.addSentencia((Sentencia)s);
    sentencias.getSentencias().addAll(((Sentencias)ss).getSentencias());
    RESULT = sentencias;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo ::= BEGIN END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Cuerpo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Cuerpo cuerpo = new Cuerpo();
    cuerpo.setSentencias(null); // Cuerpo vacío
    RESULT = cuerpo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Cuerpo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Cuerpo cuerpo = new Cuerpo();
    cuerpo.setSentencias((Sentencias)s);
    RESULT = cuerpo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP PARENTESISCIERRE IS declaracionesFunction cuerpo 
            {
              DeclProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionesFunction df = (DeclaracionesFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclProcedimiento declProcedimiento = new DeclProcedimiento();
    declProcedimiento.setNombre(id.getLexema());
    declProcedimiento.setParametros(null); // Sin parámetros
    declProcedimiento.setDeclaraciones((DeclaracionesFunction)df);
    declProcedimiento.setCuerpo((Cuerpo)c);
    RESULT = declProcedimiento;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE IS declaracionesFunction cuerpo 
            {
              DeclProcedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclParametros dp = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionesFunction df = (DeclaracionesFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclProcedimiento declProcedimiento = new DeclProcedimiento();
    declProcedimiento.setNombre(id.getLexema());
    declProcedimiento.setParametros((DeclParametros)dp);
    declProcedimiento.setDeclaraciones((DeclaracionesFunction)df);
    declProcedimiento.setCuerpo((Cuerpo)c);
    RESULT = declProcedimiento;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoFunction ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              CuerpoFunction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    CuerpoFunction cuerpoFunction = new CuerpoFunction();
    cuerpoFunction.setSentencias((Sentencias)s);
    RESULT = cuerpoFunction;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFunction",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionesFunction ::= grupoDeclaraciones1 
            {
              DeclaracionesFunction RESULT =null;
		int gd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones1 gd1 = (GrupoDeclaraciones1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclaracionesFunction declaracionesFunction = new DeclaracionesFunction();
    declaracionesFunction.setGrupoDeclaraciones1((GrupoDeclaraciones1)gd1);
    RESULT = declaracionesFunction;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoRetorno ::= BOOLEAN 
            {
              TipoRetorno RESULT =null;
		
    semanticErrorManager.semanticDebug("Tipo de retorno BOOLEAN");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    if (typeBoolean == null) {
        semanticFatalError("Tipo BOOLEAN no encontrado en tabla de tipos.", 0, 0);
    }

    TipoRetorno tipoRetorno = new TipoRetorno();
    tipoRetorno.setType(typeBoolean);
    RESULT = tipoRetorno;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoRetorno ::= INTEGER 
            {
              TipoRetorno RESULT =null;
		
    semanticErrorManager.semanticDebug("Tipo de retorno INTEGER");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");

    if (typeInteger == null) {
        semanticFatalError("Tipo INTEGER no encontrado en tabla de tipos.", 0, 0);
    }

    TipoRetorno tipoRetorno = new TipoRetorno();
    tipoRetorno.setType(typeInteger);
    RESULT = tipoRetorno;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaParametros ::= IDENTIFICADOR 
            {
              ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ListaParametros listaParametros = new ListaParametros();
    listaParametros.addIdentificador(id.getLexema());
    RESULT = listaParametros;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaParametros ::= IDENTIFICADOR DELIMLISTA listaParametros 
            {
              ListaParametros RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaParametros lps = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ListaParametros listaParametros = (ListaParametros)lps;
    listaParametros.addIdentificador(id.getLexema());
    RESULT = listaParametros;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declParametro ::= listaParametros DELIMTIPO OUT tipo 
            {
              DeclParametro RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclParametro declParametro = new DeclParametro();
    declParametro.setListaParametros((ListaParametros)lp);
    declParametro.setTipo((Tipo)t);
    declParametro.setSalida(true); // Es OUT
    RESULT = declParametro;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declParametro ::= listaParametros DELIMTIPO tipo 
            {
              DeclParametro RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaParametros lp = (ListaParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclParametro declParametro = new DeclParametro();
    declParametro.setListaParametros((ListaParametros)lp);
    declParametro.setTipo((Tipo)t);
    declParametro.setSalida(false); // No es OUT
    RESULT = declParametro;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declParametros ::= declParametro 
            {
              DeclParametros RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclParametro dp = (DeclParametro)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclParametros declParametros = new DeclParametros();
    declParametros.addParametro((DeclParametro)dp);
    RESULT = declParametros;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declParametros ::= declParametro DELIMPUNTOCOMA declParametros 
            {
              DeclParametros RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclParametro dp = (DeclParametro)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclParametros dps = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclParametros declParametros = new DeclParametros();
    declParametros.addParametro((DeclParametro)dp);
    declParametros.getParametros().addAll(((DeclParametros)dps).getParametros());
    RESULT = declParametros;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP PARENTESISCIERRE RETURN tipoRetorno IS declaracionesFunction cuerpoFunction 
            {
              DeclFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoRetorno tr = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionesFunction df = (DeclaracionesFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CuerpoFunction cf = (CuerpoFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclFunction declFunction = new DeclFunction();
    declFunction.setNombre(id.getLexema());
    declFunction.setParametros(null); // Sin parámetros
    declFunction.setTipoRetorno((TipoRetorno)tr);
    declFunction.setDeclaraciones((DeclaracionesFunction)df);
    declFunction.setCuerpo((CuerpoFunction)cf);
    RESULT = declFunction;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE RETURN tipoRetorno IS declaracionesFunction cuerpoFunction 
            {
              DeclFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclParametros dp = (DeclParametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoRetorno tr = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionesFunction df = (DeclaracionesFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CuerpoFunction cf = (CuerpoFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclFunction declFunction = new DeclFunction();
    declFunction.setNombre(id.getLexema());
    declFunction.setParametros((DeclParametros)dp);
    declFunction.setTipoRetorno((TipoRetorno)tr);
    declFunction.setDeclaraciones((DeclaracionesFunction)df);
    declFunction.setCuerpo((CuerpoFunction)cf);
    RESULT = declFunction;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declSubprograma ::= declProcedimiento 
            {
              DeclSubprograma RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclProcedimiento dp = (DeclProcedimiento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclSubprograma declSubprograma = new DeclSubprograma();
    declSubprograma.setProcedimiento((DeclProcedimiento)dp);
    RESULT = declSubprograma;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declSubprograma ::= declFunction 
            {
              DeclSubprograma RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclFunction df = (DeclFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclSubprograma declSubprograma = new DeclSubprograma();
    declSubprograma.setFunction((DeclFunction)df);
    RESULT = declSubprograma;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declSubprogramas ::= declSubprogramas declSubprograma 
            {
              DeclSubprogramas RESULT =null;
		int dssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclSubprogramas dss = (DeclSubprogramas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclSubprograma ds = (DeclSubprograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dss.addSubprograma((DeclSubprograma)ds);
    RESULT = dss;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declSubprogramas ::= declSubprograma 
            {
              DeclSubprogramas RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclSubprograma ds = (DeclSubprograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclSubprogramas declSubprogramas = new DeclSubprogramas();
    declSubprogramas.addSubprograma((DeclSubprograma)ds);
    RESULT = declSubprogramas;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Tipo definido por el usuario: " + id.getLexema());
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeIF tipoUsuario = scope.getTypeTable().getType(id.getLexema());

    if (tipoUsuario == null) {
        semanticFatalError("Tipo '" + id.getLexema() + "' no declarado.", id.getLine(), id.getColumn());
    }

    Tipo tipo = new Tipo();
    tipo.setType(tipoUsuario);
    RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		
    semanticErrorManager.semanticDebug("Tipo BOOLEAN");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");

    if (typeBoolean == null) {
        semanticFatalError("Tipo BOOLEAN no encontrado en tabla de tipos.", 0, 0);
    }

    Tipo tipo = new Tipo();
    tipo.setType(typeBoolean);
    RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= INTEGER 
            {
              Tipo RESULT =null;
		
    semanticErrorManager.semanticDebug("Tipo INTEGER");
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");

    if (typeInteger == null) {
        semanticFatalError("Tipo INTEGER no encontrado en tabla de tipos.", 0, 0);
    }

    Tipo tipo = new Tipo();
    tipo.setType(typeInteger);
    RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declVariable ::= IDENTIFICADOR DELIMLISTA declVariable 
            {
              DeclVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclVariable dv = (DeclVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Caso de lista: identificador seguido de otra variable
    String nombre = id.getLexema();
    TypeIF tipoVariable = ((DeclVariable)dv).getTipo();

    // Crear símbolo
    SymbolVariable symbol = new SymbolVariable(scopeManager.getCurrentScope(), nombre, tipoVariable);

    SymbolTableIF symbolTable = scopeManager.getCurrentScope().getSymbolTable();
    if (symbolTable.containsSymbol(nombre)) {
        semanticFatalError("Variable duplicada: " + nombre, id.getLine(), id.getColumn());
    }
    symbolTable.addSymbol(symbol);

    RESULT = new DeclVariable(nombre, tipoVariable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declVariable ::= IDENTIFICADOR DELIMTIPO tipo 
            {
              DeclVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String nombre = id.getLexema();
    TypeIF tipoVariable = ((Tipo)t).getType();

    // Crear el símbolo de la variable
    SymbolVariable symbol = new SymbolVariable(scopeManager.getCurrentScope(), nombre, tipoVariable);

    // Insertar en la tabla de símbolos
    SymbolTableIF symbolTable = scopeManager.getCurrentScope().getSymbolTable();
    if (symbolTable.containsSymbol(nombre)) {
        semanticFatalError("Variable duplicada: " + nombre, id.getLine(), id.getColumn());
    }
    symbolTable.addSymbol(symbol);

    // Propagar la variable
    RESULT = new DeclVariable(nombre, tipoVariable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declVariables ::= declVariables declVariable 
            {
              DeclVariables RESULT =null;
		int dvsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclVariables dvs = (DeclVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclVariable dv = (DeclVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dvs.addVariable(dv);
    RESULT = dvs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declVariables ::= declVariable 
            {
              DeclVariables RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclVariable dv = (DeclVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclVariables declVariables = new DeclVariables();
    declVariables.addVariable(dv);
    RESULT = declVariables;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declCampo ::= IDENTIFICADOR DELIMTIPO tipo DELIMPUNTOCOMA 
            {
              DeclCampo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    DeclCampo declCampo = new DeclCampo();
    declCampo.setNombre(id.getLexema());
    declCampo.setTipo((Tipo)t);
    RESULT = declCampo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declCampos ::= declCampos declCampo 
            {
              DeclCampos RESULT =null;
		int dcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclCampos dcs = (DeclCampos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclCampo dc = (DeclCampo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dcs.addCampo((DeclCampo)dc);
    RESULT = dcs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declCampos ::= declCampo 
            {
              DeclCampos RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclCampo dc = (DeclCampo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclCampos declCampos = new DeclCampos();
    declCampos.addCampo((DeclCampo)dc);
    RESULT = declCampos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declTipo ::= TYPE IDENTIFICADOR IS RECORD declCampos END RECORD DELIMPUNTOCOMA 
            {
              DeclTipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclCampos dcs = (DeclCampos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    String nombreTipo = id.getLexema();
    ScopeIF scope = scopeManager.getCurrentScope();
    TypeTableIF typeTable = scope.getTypeTable();

    // Verificar si el tipo ya existe
    if (typeTable.containsType(nombreTipo)) {
        semanticFatalError("Tipo duplicado: " + nombreTipo, id.getLine(), id.getColumn());
    }

    // Crear el nuevo tipo RECORD
    TypeRecord typeRecord = new TypeRecord(scope, nombreTipo);

    // Añadir los campos
    for (DeclCampo campo : ((DeclCampos)dcs).getCampos()) {
        typeRecord.addCampo(campo.getNombre(), campo.getTipo().getType());
    }

    // Insertar el tipo en la tabla de tipos
    typeTable.addType(typeRecord);

    // Propagar el tipo
    RESULT = new DeclTipo(typeRecord);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declTipos ::= declTipos declTipo 
            {
              DeclTipos RESULT =null;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclTipos dts = (DeclTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclTipo dt = (DeclTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dts.addTipo(dt);
    RESULT = dts;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declTipos ::= declTipo 
            {
              DeclTipos RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclTipo dt = (DeclTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclTipos declTipos = new DeclTipos();
    declTipos.addTipo(dt);
    RESULT = declTipos;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BOOLEANO 
            {
              Literal RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token bool = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Procesando literal BOOLEANO: " + bool);
    
	TypeBoolean typeBoolean = (TypeBoolean) scopeManager.searchType("BOOLEAN");
    RESULT = new Literal(bool.getLexema(), typeBoolean);
    
    if (scopeManager.getCurrentScope() != null) {
        RESULT.crearTemporal(scopeManager.getCurrentScope());
        semanticErrorManager.semanticDebug("Temporal para BOOLEANO creado correctamente.");
    } else {
        semanticErrorManager.semanticFatalError("[Error] Scope actual no disponible para crear temporal.");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token ent = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    semanticErrorManager.semanticDebug("Procesando literal ENTERO: " + ent);
    
	TypeInteger typeInteger = (TypeInteger) scopeManager.searchType("INTEGER");
    RESULT = new Literal(ent.getLexema(), typeInteger);
    
    // Crear temporal asociado
    if (scopeManager.getCurrentScope() != null) {
        RESULT.crearTemporal(scopeManager.getCurrentScope());
        semanticErrorManager.semanticDebug("Temporal para ENTERO creado correctamente.");
    } else {
        semanticErrorManager.semanticFatalError("[Error] Scope actual no disponible para crear temporal.");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constante ::= IDENTIFICADOR DELIMTIPO CONSTANT ASIGNACION literal DELIMPUNTOCOMA 
            {
              Constante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    // Creo el símbolo constante
    TypeIF type = ((Literal)lit).getType();
    SymbolConstant symbol = new SymbolConstant(id.getLexema(), scopeManager.getCurrentScope(), type);
    symbol.setType(((Literal)lit).getType());

    SymbolTableIF symbolTable = scopeManager.getCurrentScope().getSymbolTable();
    // Inserto en la tabla de símbolos
    if (symbolTable.containsSymbol(id.getLexema())) {
        semanticFatalError("Constante duplicada: " + id.getLexema(), id.getLine(), id.getColumn());
    }
    
    symbolTable.addSymbol(symbol);

    // Informo en el debug
    semanticErrorManager.semanticDebug("Constante '" + id.getLexema() + "' de tipo " + type.getName() + " añadida a la tabla de símbolos.");

    // Creo el objeto Constante que propaga el símbolo y el tipo
    RESULT = new Constante(symbol, symbol.getType());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declConstantes ::= declConstantes constante 
            {
              DeclConstantes RESULT =null;
		int dcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclConstantes dcs = (DeclConstantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constante c = (Constante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    dcs.addConstante(c);
    RESULT = dcs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declConstantes ::= constante 
            {
              DeclConstantes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constante c = (Constante)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    DeclConstantes declConstantes = new DeclConstantes();
    declConstantes.addConstante(c);
    RESULT = declConstantes;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // grupoDeclaraciones3 ::= 
            {
              GrupoDeclaraciones3 RESULT =null;
		
    GrupoDeclaraciones3 grupoDeclaraciones3 = new GrupoDeclaraciones3();
    grupoDeclaraciones3.setDeclSubprogramas(null);
    RESULT = grupoDeclaraciones3;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // grupoDeclaraciones3 ::= declSubprogramas 
            {
              GrupoDeclaraciones3 RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclSubprogramas ds = (DeclSubprogramas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GrupoDeclaraciones3 grupoDeclaraciones3 = new GrupoDeclaraciones3();
    grupoDeclaraciones3.setDeclSubprogramas((DeclSubprogramas)ds);
    RESULT = grupoDeclaraciones3;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // grupoDeclaraciones2 ::= grupoDeclaraciones3 
            {
              GrupoDeclaraciones2 RESULT =null;
		int gd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones3 gd3 = (GrupoDeclaraciones3)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GrupoDeclaraciones2 grupoDeclaraciones2 = new GrupoDeclaraciones2();
    grupoDeclaraciones2.setGrupoDeclaraciones3((GrupoDeclaraciones3)gd3);
    RESULT = grupoDeclaraciones2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grupoDeclaraciones2 ::= declVariables grupoDeclaraciones3 
            {
              GrupoDeclaraciones2 RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclVariables dv = (DeclVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gd3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones3 gd3 = (GrupoDeclaraciones3)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GrupoDeclaraciones2 grupoDeclaraciones2 = new GrupoDeclaraciones2();
    grupoDeclaraciones2.setDeclVariables((DeclVariables)dv);
    grupoDeclaraciones2.setGrupoDeclaraciones3((GrupoDeclaraciones3)gd3);
    RESULT = grupoDeclaraciones2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // grupoDeclaraciones1 ::= grupoDeclaraciones2 
            {
              GrupoDeclaraciones1 RESULT =null;
		int gd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones2 gd2 = (GrupoDeclaraciones2)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GrupoDeclaraciones1 grupoDeclaraciones1 = new GrupoDeclaraciones1();
    grupoDeclaraciones1.setGrupoDeclaraciones2((GrupoDeclaraciones2)gd2);
    RESULT = grupoDeclaraciones1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // grupoDeclaraciones1 ::= declTipos grupoDeclaraciones2 
            {
              GrupoDeclaraciones1 RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclTipos dt = (DeclTipos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones2 gd2 = (GrupoDeclaraciones2)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    GrupoDeclaraciones1 grupoDeclaraciones1 = new GrupoDeclaraciones1();
    grupoDeclaraciones1.setDeclTipos((DeclTipos)dt);
    grupoDeclaraciones1.setGrupoDeclaraciones2((GrupoDeclaraciones2)gd2);
    RESULT = grupoDeclaraciones1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= grupoDeclaraciones1 
            {
              Declaraciones RESULT =null;
		int gd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones1 gd1 = (GrupoDeclaraciones1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Declaraciones declaraciones = new Declaraciones();
    declaraciones.setGrupoDeclaraciones1((GrupoDeclaraciones1)gd1);
    RESULT = declaraciones;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declConstantes grupoDeclaraciones1 
            {
              Declaraciones RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclConstantes dc = (DeclConstantes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GrupoDeclaraciones1 gd1 = (GrupoDeclaraciones1)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Declaraciones declaraciones = new Declaraciones();
    declaraciones.setDeclConstantes((DeclConstantes)dc);
    declaraciones.setGrupoDeclaraciones1((GrupoDeclaraciones1)gd1);
    RESULT = declaraciones;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= PROCEDURE IDENTIFICADOR PARENTESISAP PARENTESISCIERRE IS declaraciones cuerpo 
            {
              Axiom RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaraciones decl = (Declaraciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (decl == null) {
        semanticFatalError(SemanticErrors.NDC, ((Token)id).getLine(), ((Token)id).getColumn());
    }
    if (c == null) {
        semanticFatalError(SemanticErrors.CPI, ((Token)id).getLine(), ((Token)id).getColumn());
    }
    
    RESULT = new Axiom(new Program(decl, c));
    // TODO: Verificar que el programa contiene declaraciones y cuerpo correctos

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
		if (ax == null) {
			semanticFatalError(SemanticErrors.NPV, 0, 0);
		}

		semanticErrorManager.semanticInfo("Programa analizado correctamente.");
  		
  		List intermediateCode = ax.getIntermediateCode ();
  		if (intermediateCode != null) {
            finalCodeFactory.create(intermediateCode);
            semanticErrorManager.semanticDebug("Código intermedio y final generados correctamente.");
        }
        else {
            semanticFatalError(SemanticErrors.NPV, 0, 0);
        }
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
		scopeManager.closeScope();
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
        
        // Apertura del Scope Global
        semanticErrorManager.semanticInfo("Abriendo Scope Global...");
        scopeManager.openScope("global");
        semanticErrorManager.semanticDebug("Scope Global abierto correctamente.");

    	// Registrar los tipos primitivos en el Scope Global
        semanticErrorManager.semanticInfo("Registrando tipos primitivos...");
        ScopeIF globalScope = scopeManager.getCurrentScope();

		TypeTableIF typeTable = globalScope.getTypeTable();
        
        TypeBoolean typeBoolean = new TypeBoolean(globalScope);
        typeTable.addType(typeBoolean);
        
        TypeInteger typeInteger = new TypeInteger(globalScope);
        typeTable.addType(typeInteger);

        semanticErrorManager.semanticDebug("Tipos BOOLEAN e INTEGER registrados correctamente.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

